#[derive(Serialize, Debug, Deserialize, Clone, PartialEq)]
pub struct SimMessage {
    pub host_name: String,
    user_name: String,
    status: Status,
    pub logging_service_running: bool,
    pub config: SimConfig,
    pub tcm_types: Option<Vec<TCMType>>,
    pub products_installed: Option<Vec<Product>>,
}

impl SimMessage {
    pub fn new(
        config: SimConfig,
        host_name: String,
        user_name: String,
        status: Status,
        logging_service_running: bool,
        tcm_types: Option<Vec<TCMType>>,
        products_installed: Option<Vec<Product>>,
    ) -> Self {
        SimMessage {
            host_name,
            user_name,
            status,
            logging_service_running,
            config,
            tcm_types,
            products_installed,
        }
    }

    pub fn set_status(&mut self, status: Status) {
        self.status = status;
    }

    pub fn set_user_name(&mut self, user_name: String) {
        self.user_name = user_name;
    }

    pub fn status(&self) -> &Status {
        &self.status
    }

    pub fn user_name(&self) -> Option<&str> {
        match self.status {
            Status::Connected | Status::ConnectedEERunning => Some(self.user_name.as_str()),
            _ => None,
        }
    }
}
